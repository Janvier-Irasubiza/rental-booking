version: '3.8'

services:
  frontend:
    container_name: frontend
    build:
      context: ./rb-frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./rb-frontend:/app
      - node_modules:/app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000/api
      - VITE_INTERNAL_API_URL=http://backend:8000/api
    networks:
      app-network:
        aliases:
          - frontend

  backend:
    container_name: backend
    build: 
      context: ./rb-backend/rentalBooking
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - PYTHONBREAKPOINT=ipdb.set_trace
      - DB_HOST=db
      - DB_NAME=rentalbookingdb
      - DB_USER=rbusr
      - DB_PASSWORD=fdBM&uVz*9;c5TR2Kt@
      - PYTHONUNBUFFERED=1
      - AUTHLIB_INSECURE_TRANSPORT=1
    volumes:
      - ./rb-backend/rentalBooking:/app
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    networks:
      app-network:
        aliases:
          - backend

  db:
    container_name: db
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=rentalbookingdb
      - POSTGRES_USER=rbusr
      - POSTGRES_PASSWORD=fdBM&uVz*9;c5TR2Kt@
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rbusr -d rentalbookingdb -h 127.0.0.1"]
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      app-network:
        aliases:
          - database

volumes:
  postgres_data:
  node_modules:

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.5.1